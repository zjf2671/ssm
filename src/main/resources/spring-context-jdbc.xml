<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:jdbc="http://www.springframework.org/schema/jdbc"  
	xmlns:jee="http://www.springframework.org/schema/jee" xmlns:tx="http://www.springframework.org/schema/tx" 
	xmlns:aop="http://www.springframework.org/schema/aop" 
    xmlns:util="http://www.springframework.org/schema/util" xmlns:task="http://www.springframework.org/schema/task" xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.0.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.0.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd"
	default-lazy-init="true">
	
	<!-- 管理数据源配置, 使用 BoneCP 数据库连接池 -->
	<bean id="masterDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close"> 
	    <!-- 数据源驱动类可不写，Druid默认会自动根据URL识别DriverClass -->
	    <property name="driverClassName" value="${jdbc.master.driver}" />
		<!-- 基本属性 url、user、password -->
		<property name="url" value="${jdbc.master.url}" />
		<property name="username" value="${jdbc.master.username}" />
		<property name="password" value="${jdbc.master.password}" />
		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="${jdbc.pool.init}" />
		<property name="minIdle" value="${jdbc.pool.minIdle}" /> 
		<property name="maxActive" value="${jdbc.pool.maxActive}" />
		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="60000" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />
		<property name="validationQuery" value="${jdbc.testSql}" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<property name="connectionInitSqls" value="set names utf8mb4;"/>
		<!-- 配置监控统计拦截的filters -->
	    <property name="filters" value="config" />
		<property name="connectionProperties" value="config.decrypt=false" />
	</bean>
	
	<!-- 查询数据源配置, 使用 BoneCP 数据库连接池 
	<bean id="slaveDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close"> 
	     数据源驱动类可不写，Druid默认会自动根据URL识别DriverClass
	    <property name="driverClassName" value="${jdbc.slave.driver}" />
		基本属性 url、user、password
		<property name="url" value="${jdbc.slave.url}" />
		<property name="username" value="${jdbc.slave.username}" />
		<property name="password" value="${jdbc.slave.password}" />
		 配置初始化大小、最小、最大 
		<property name="initialSize" value="${jdbc.pool.init}" />
		<property name="minIdle" value="${jdbc.pool.minIdle}" /> 
		<property name="maxActive" value="${jdbc.pool.maxActive}" />
		配置获取连接等待超时的时间
		<property name="maxWait" value="60000" />
		配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		 配置一个连接在池中最小生存的时间，单位是毫秒 
		<property name="minEvictableIdleTimeMillis" value="300000" />
		<property name="validationQuery" value="${jdbc.testSql}" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<property name="connectionInitSqls" value="set names utf8mb4;"/>
		 配置监控统计拦截的filters 
	    <property name="filters" value="config" />
		<property name="connectionProperties" value="config.decrypt=false" />
	</bean> -->
	
	<!-- 查询数据源配置, 使用 BoneCP 数据库连接池 -->
	<!-- <bean id="cmsDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close"> 
	    数据源驱动类可不写，Druid默认会自动根据URL识别DriverClass
	    <property name="driverClassName" value="${jdbc.cms.driver}" />
		基本属性 url、user、password
		<property name="url" value="${jdbc.cms.url}" />
		<property name="username" value="${jdbc.cms.username}" />
		<property name="password" value="${jdbc.cms.password}" />
		配置初始化大小、最小、最大
		<property name="initialSize" value="${jdbc.pool.init}" />
		<property name="minIdle" value="${jdbc.pool.minIdle}" /> 
		<property name="maxActive" value="${jdbc.pool.maxActive}" />
		配置获取连接等待超时的时间
		<property name="maxWait" value="60000" />
		配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		配置一个连接在池中最小生存的时间，单位是毫秒
		<property name="minEvictableIdleTimeMillis" value="300000" />
		<property name="validationQuery" value="${jdbc.testSql}" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<property name="connectionInitSqls" value="set names utf8mb4;"/>
		配置监控统计拦截的filters
	    <property name="filters" value="config" />
		<property name="connectionProperties" value="config.decrypt=false" />
	</bean> -->
	
	<!-- 多数据源 -->
	<bean id="daynamicDataSource" class="com.ssm.common.datasource.DynamicRoutingDataSource">
        <property name="targetDataSources">
            <map key-type="java.lang.String">
                <entry key="master" value-ref="masterDataSource"/>
                <!-- <entry key="slave" value-ref="slaveDataSource"/> -->
                <!-- <entry key="cms" value-ref="cmsDataSource"/> -->
            </map>
        </property>
    </bean>
	
 	<!-- MyBatis begin -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="daynamicDataSource"/>
        <property name="mapperLocations" value="classpath:/mappings/**/*.xml"/>
    </bean>
    
    <!-- 扫描basePackage下所有以@MyBatisDao注解的接口 -->
    <bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
        <property name="basePackage" value="com.ssm.dao"/>
        <!-- <property name="annotationClass" value="com.ssm.common.annotation.MyBatisDao"/> -->
    </bean>
    
	<!-- ================================声明式事务相关控制=================================================    -->
    <bean name="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">     
          <property name="dataSource" ref="daynamicDataSource"></property>
    </bean>     
    <tx:advice id="userTxAdvice" transaction-manager="transactionManager">
    <tx:attributes>
      <tx:method name="delete*" propagation="REQUIRED"  rollback-for="java.lang.Exception"/>
      <tx:method name="insert*" propagation="REQUIRED"  rollback-for="java.lang.Exception" />
      <tx:method name="update*" propagation="REQUIRED"  rollback-for="java.lang.Exception" />
      <tx:method name="save*" propagation="REQUIRED"   rollback-for="java.lang.Exception" />
      <tx:method name="find*" propagation="SUPPORTS" read-only="true" />
      <tx:method name="get*" propagation="SUPPORTS" read-only="true" />
      <tx:method name="select*" propagation="SUPPORTS" read-only="true" />
    </tx:attributes>
  </tx:advice>
  
  <!--把事务控制在Service层-->
  <aop:config>
    <aop:pointcut id="pc" expression="(execution(public * com.ssm.service..*.*(..)))" /> 
    <aop:advisor pointcut-ref="pc" advice-ref="userTxAdvice" order="1" />
  </aop:config>
  
  <aop:config>
       <aop:pointcut id="dataSoucePoint" expression="(execution(public * com.ssm.service..*.*(..)))" />
       <aop:advisor advice-ref="dataSourceAdvice" pointcut-ref="dataSoucePoint" order="0" />
  </aop:config>
  
  
	
</beans>